import { Cell } from "cell.slint";
import { TurnInfo } from "turninfo.slint";
import { HorizontalBox, VerticalBox, Button } from "std-widgets.slint";

struct GamePieceData {
    marker: string,
    marker-color: color
}

export component AppWindow inherits Window {

    in-out property <string> current-player: "X";
    in property <bool> is-game-over: false;
    in property <[GamePieceData]> board: [
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" }
        ];

    callback check-if-game-over();
    callback restart-game();

    private property <length> cell-spacing: 10px;
    private property <length> cell-size: 150px;
    private property <int> row-count: 3;
    private property <int> column-count: 3;
    private property <color> marker-color-x: #800080;
    private property <color> marker-color-o: #ffa500;
    // Calculate the total width and height of the grid.
    private property <length> game-board-width: (column-count * cell-size) + ((column-count + 1) * cell-spacing);
    private property <length> game-board-height: (row-count * cell-size) + ((row-count + 1) * cell-spacing);

    title: "Tic Tac Toe";
    default-font-family: "Noto Sans";
    background: #313e50;
    width: game-board-width;
    height: game-board-height + 50px;

    for cell[i] in board: Cell {
        clicked => {
            if (cell.marker == "" && !is-game-over) {
                cell.marker = current-player;
                cell.marker-color = root.current-player == "X" ? root.marker-color-x : root.marker-color-o;
                root.check-if-game-over();
                if (!root.is-game-over) {
                    root.current-player = root.current-player == "X" ? "O" : "X";
                }
            }
        }
        // Calculate the centering offsets (x, y) for the cell.
        x: root.cell-spacing + mod(i, root.column-count) * (root.cell-size + root.cell-spacing);
        y: root.cell-spacing + floor(i / root.row-count) * (root.cell-size + root.cell-spacing);

        width: root.cell-size;
        height: root.cell-size;

        marker: cell.marker;
        marker-color: cell.marker-color;
    }

    HorizontalBox {
        VerticalLayout{
            alignment: end;
            Button {
                text: "Restart";
                clicked => { root.restart-game() }
            }
        }
        alignment: start;
    }

    HorizontalBox {
        Text {
            text: !root.is-game-over ? (root.current-player + " Turn") : "Game Over!";
            color: white;
            vertical-alignment: bottom;
            font-size: 20px;
        }
        alignment: end;
    }

    HorizontalBox {
        VerticalLayout {
            // The x position for the transition came from trial and error.
            // Note: If the font size, width or other property is changed, these may need to be adjusted.
            TurnInfo { rect-x: root.current-player == "O" ? 9px : -50px; }
            alignment: end;
            padding-bottom: 40px;
        }
        alignment: center;
    }

    HorizontalBox {
        Text {
            text: "X        O"; // TODO: Make this dynamic based on window size.
            color: white;
            vertical-alignment: bottom;
            font-size: 20px;
            font-weight: 700;
        }
        alignment: center;
    }
}